/* Denotational Semantics for Grammar */

/* <STMT> --> <IF_STMT> | <BLOCK> | <ASSIGN> | <DECLARE> |<WHILE_LOOP> */
M_stmt(input, s)==> if M_ifstmt(input, s) != Error
                        return s = M_ifstmt(input, s)
                    else if M_block(input, s) != Error
                        return s = M_block(input, s)
                    else if M_assign(inut, s) != Error
                        return s = M_assign(input, s)
                    else if M_declare(input, s) != Error
                        return s = M_declare(input, s)
                    else if M_whileloop(input, s) != Error
                        return s = M_whileloop(input, s)
                    else return Error("Invalid statment")

/* <STMT_LIST> --> { <STMT> `;` } */
M_stmtList(input, s)==> if M_stmt(input, s) == Error
                           return Error
                        else return s = M_stmt(input, s)

/* <WHILE_LOOP> --> `while` `(` <BOOL_EXPR> `)` <BLOCK> */

M_whileloop('while' '(' <bool_expr> ')' <block>, s)==> 
                           if M_boolexpr(<bool_expr>, s) == False
                              return s
                           else if M_boolexpr(<bool_expr>, s) == True
                              {
                               if M_block(<block>, s) == True
                                 return M_whileloop('while' '(' <bool_expr> ')' <block>, M_block(<block>, s))
                                 }
                            else if M_boolexpr(<bool_expr>, s) == Error
                                 return Error
                  
/* <IF_STMT> --> `if` `(` <BOOL_EXPR> `)` <BLOCK>  [ `else`  <BLOCK> ] */

M_ifstmt('if' '(' <bool_expr> ')' <block1> 'else' <block2>, s)==> 
                           if M_boolexpr(<BOOL_EXPR>, s) == Error
                              return Error
                           else if M_boolexpr(<bool_expr>, s) == True
                              {
                               if M_block(<block1>, s) == Error
                                 return Error
                               else
                               return s = M_block(<block1>, s) }
                           else if M_boolexpr(<bool_expr>, s) == False
                              {
                               if M_block(<block2>, s) == Error
                                 return Error
                               else
                               return s = M_block(<block2>, s) }
                               
M_ifstmt('if' '(' <bool_expr> ')' <block>, s)==> 
                           if M_boolexpr(<BOOL_EXPR>, s) == Error
                              return Error
                           else if M_boolexpr(<bool_expr>, s) == True
                              {
                               if M_block(<block>, s) == Error
                                 return Error
                               else
                               return s = M_block(<block>, s) }

/* <DECLARE> --> `DataType` ID {`,` ID } */ 

M_Declare('DataType' ID, s) ==>
                        if M_ID(ID, s) == Error
                          return Error
                         else return s 
                         
/* <ASSIGN> --> ID `=` <EXPR> */

M_Assign(ID '=' <EXPR>, s)==>
                     if M_ID(ID, s) == Error
                        return Error
                      else if M_Expr(<EXPR>, s) == Error
                        return Error
                       else return s
                       
/* EXPR --> <TERM> {(`+`|`-`) <TERM>} */

M_Expr(<TERM>, s)==> if M_Term(<TERM>) == false
                     return error
                   else return s = M_Term(<TERM>)
M_Expr(<TERM1> + <TERM2>, s)==> if M_Term(<TERM1>) == false
                     return error
                   else if M_Term(<TERM2>) == false
                     return error
                    else return s = <TERM1> + <TERM2>
M_Expr(<TERM1> - <TERM2>, s)==>if M_Term(<TERM1>) == false
                     return error
                   else if M_Term(<TERM2>) == false
                     return error
                    else return s = <TERM1> - <TERM2>
                    
/* TERM --> <FACT> {(`*`|`/`|`%`) <FACT>} */

M_Term(<FACT>, s)==>if M_Fact(<FACT>) == false
                     return error 
                   else return s = M_Fact(<FACT>)
M_Term(<FACT1> * <FACT2>, s)==> if M_Fact(<FACT1>) == false
                     return error
                   else if (<FACT2>) == false
                     return error
                    else return s = (<FACT1>) * (<FACT2>)
M_Term(<FACT1> / <FACT2>, s)==>if (<FACT1>) == false
                     return error
                   else if (<FACT2>) == false
                     return error
                    else return s = (<FACT1>) / (<FACT2>)
M_Term(<FACT1> % <FACT2>, s)==>if (<FACT1>) == false
                     return error
                   else if (<FACT2>) == false
                     return error
                    else return s = (<FACT1>) % (<FACT2>)
                    
/* <FACT> --> ID | INT_LIT | FLOAT_LIT | `(` <EXPR> `)` */

M_Fact(ID, s)==> if M_ID(ID) == error
               return error
              else return True
M_Fact(INT_LIT, s)==>if M_INT_LIT(INT_LIT) == error
               return error
              else return True
M_Fact(FLOAT_LIT, s)==>if M_FLOAT_LIT(FLOAT_LIT) == error
               return error
              else return True
M_Fact('(' <EXPR> ')', s)==> if M_Expr(<EXPR>, s) == error
                                    return error
                                   else return True
                                   
/* <BOOL_EXPR> --> <BTERM> {(`>`|`<`|`>=`|`<=`) <BTERM>} */
 
M_BoolExpr(<BTERM>, s)==> if M_Bterm(<BTERM>,s) == error
                           return error
                         else return s = M_Bterm(<BTERM>,s)
M_BoolExpr(<BTERM1> > <BTERM2>, s)==> if M_BTERM(<BTERM1>, s) == Error
                                         return Error
                                  else if M_BTERM(<BTERM2>, s) == Error
                                         return Error
                                  else if ((<BTERM1> <= <BTERM2)) == True
                                          return False
                                  else return True       
M_BoolExpr(<BTERM1> < <BTERM2>, s)==> if M_BTERM(<BTERM1>, s) == Error
                                         return Error
                                  else if M_BTERM(<BTERM2>, s) == Error
                                         return Error
                                  else if ((<BTERM1> >= <BTERM2)) == True
                                          return False
                                  else return True  
M_BoolExpr(<BTERM1> >= <BTERM2>, s)==> if M_BTERM(<BTERM1>, s) == Error
                                         return Error
                                  else if M_BTERM(<BTERM2>, s) == Error
                                         return Error
                                  else if ((<BTERM1> < <BTERM2)) == True
                                          return False
                                  else return True  
M_BoolExpr(<BTERM1> <= <BTERM2>, s)==>if M_BTERM(<BTERM1>, s) == Error
                                         return Error
                                  else if M_BTERM(<BTERM2>, s) == Error
                                         return Error
                                  else if ((<BTERM1> > <BTERM2)) == True
                                          return False
                                  else return True  

/* <BTERM> --> <BAND> {(`==`|`!=`) <BAND>} */

M_BTERM(<BAND>, s)==> if M_Band(<BAND>, s) == Error
                              return Error
                         else return s = M_Band(<BAND>, s)
M_BTERM(<BAND1> == <BAND2>, s)==> if M_Band(<BAND1>, s) == Error
                                       return Error
                                else if M_Band(<BAND2>, s) == Error
                                       return Error
                                else if (<BAND1> != <BAND2>) == True
                                       return False
                                else return True 
M_BTERM(<BAND1> != <BAND2>, s)==>if M_Band(<BAND1>, s) == Error
                                       return Error
                                else if M_Band(<BAND2>, s) == Error
                                       return Error
                                else if (<BAND1> == <BAND2>) == True
                                       return False
                                else return True 
                                
/* <BAND> --> <BOR> {`&&` <BOR>} */

M_Band(<BOR>, s)==> if M_Bor(<BOR>, s) == Error
                           return Error
                       else return s = M_Bor(<BOR>, s)
M_Band(<BOR1> && <BOR2>, s)==> if M_Bor(<BOR1>, s) == Error
                                    return Error
                               else if M_Bor(<BOR1>, s) == False
                                    return False
                               else if M_Bor(<BOR2>, s) == Error
                                    retrurn Error
                               else if M_Bor(<Bor2>, s) == False
                                    return Error
                               else return True

/* <BOR> --> <EXPR> {`||` <EXPR>} */

M_Bor(<EXPR>, s)==> if M_Expr(<EXPR>, s) == Error
                        return Error
                  else return s = M_Expr(<EXPR>, s)
M_Bor(<Expr1> || <EXPR2>, s) ==> if_M_Expr(<EXPR>, s) == Error
                                    return Error`
                                if M_Expr(<EXPR1>) == True
                                    return True
                                if M_Expr(<EXPR2>) == True
                                    return True
                                else return False
    
                                